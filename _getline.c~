#include "shell.h"






ssize_t _getline(char **lineptr, size_t *n, FILE *stream) {
    if (lineptr == NULL || n == NULL || stream == NULL) {
        errno = EINVAL;
        return -1;
    }

    ssize_t bytes_read;
    size_t bytes_allocated = *n;
    size_t position = 0;
    char *line_buffer = (char *)malloc(bytes_allocated);

    if (line_buffer == NULL) {
        errno = ENOMEM;
        return -1;
    }

    while (1) {
        bytes_read = read(fileno(stream), line_buffer + position, bytes_allocated - position);

        if (bytes_read == -1) {
            free(line_buffer);
            return -1;
        } else if (bytes_read == 0) {
            if (position == 0) {
                free(line_buffer);
                return 0;  // End of file reached without reading any data
            }
            break;  // End of file reached
        }

        for (size_t i = position; i < position + bytes_read; i++) {
            if (line_buffer[i] == '\n') {
                line_buffer[i] = '\0';
                position = i;
                break;
            }
        }

        position += bytes_read;

        if (position == bytes_allocated) {
            bytes_allocated *= 2;
            char *new_line_buffer = (char *)realloc(line_buffer, bytes_allocated);

            if (new_line_buffer == NULL) {
                free(line_buffer);
                errno = ENOMEM;
                return -1;
            }

            line_buffer = new_line_buffer;
        }
    }

    *lineptr = line_buffer;
    *n = bytes_allocated;

    return (ssize_t)position;
}
